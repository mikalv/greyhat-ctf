This time you probably head to look more closely at the assembly code. Luckily you have part of the sourcecode
from the story recap already. So it shouldn't have been to difficult. Here is a simple solution with `gdb` and
a short python script.

    level02@greyhat:/levels/level03$ gdb ./level03
    GNU gdb (GDB) 7.12.1
    (gdb) set disassembly-flavor intel
    (gdb) disassemble main
    Dump of assembler code for function main:
       0x000000000040083d <+0>: push   rbp
    [... snip ...]
       0x00000000004008a2 <+101>:   movzx  eax,BYTE PTR [rbp+rax*1-0x40]
       0x00000000004008a7 <+106>:   movzx  edx,BYTE PTR [rip+0x2005d2]        # 0x600e80 <XORkey>
       0x00000000004008ae <+113>:   xor    edx,eax                            ; this time we find again a XOR key
    [... snip ...]
       0x00000000004008d8 <+155>:   mov    esi,0x600e60                       ; but if we inspect the secret_password, it will
       0x00000000004008dd <+160>:   mov    rdi,rax                            ; not be decrypted. Actually our input is XORed
       0x00000000004008e0 <+163>:   call   0x4006c0 <strcmp@plt>              ; and that is compared with the ecnrypted password
       0x00000000004008e5 <+168>:   test   eax,eax
    [... snip ...]
       0x0000000000400918 <+219>:   pop    rbp
       0x0000000000400919 <+220>:   ret
    End of assembler dump.
    (gdb) x &XORkey                                             ; so first we want to know the value of the XORkey
    0x600e80 <XORkey>:  0x00000041                              ; which is 0x41 (hex) or 65 in decimal
    (gdb) x/s 0x600e60                                          ; we also need the scrambled password.
    0x600e60 <secret_password>: ")q6\036(2\036\065)p2\036)u\"*r3\036'q--q6(/&\036,r"
    (gdb)

If you encrypt something with XOR, you can decrypt it with the same key. So we can write a few lines of python to
decrypt the scrambled string with python:

>>> pw = ""
>>> for c in ")q6\036(2\036\065)p2\036)u\"*r3\036'q--q6(/&\036,r":
...  pw += chr(ord(c)^0x41)
...
>>> print pw
h0w_is_th1s_h4ck3r_f0ll0wing_m3

######################################################################

Source code level03.c. The difference to level02.c is that not the clear password is compared to the input,
but the encrypted input is compared with the encrypted password.


#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdint.h>
#include <sys/types.h>

// h0w_is_th1s_h4ck3r_f0ll0wing_m3
char secret_password[] =  "\x29\x71\x36\x1e\x28\x32\x1e\x35\x29\x70\x32\x1e\x29\x75\x22\x2a\x72\x33\x1e\x27\x71\x2d\x2d\x71\x36\x28\x2f\x26\x1e\x2c\x72";
uint8_t XORkey = 0x41;

void spawn_shell() {
    gid_t gid;
    uid_t uid;
    gid = getegid();
    uid = geteuid();
    setresgid(gid, gid, gid);
    setresuid(uid, uid, uid);
    system("/bin/sh");
}

int main (int argc, char *argv[]) {

    char password_input[32];
    char *pos;
    int i;

    printf("~Zero Cool Simple Backdoor v3~\nEnter Password:\n");
    read(STDIN_FILENO, password_input, 32);
    password_input[31]='\0';

    if ((pos=strchr(password_input, '\n')) != NULL) *pos = '\0';

    for(i=0; i<strlen(password_input); i++) {
        password_input[i] = password_input[i] ^ XORkey;
    }

    if(strcmp(password_input,secret_password)==0) {
        printf("Correct! Here is the level3 shell.\nRead the level3 password in /home/level3/.pass to login with `ssh level3@gracker.org`\n");
        spawn_shell();
    } else{
        printf("wrong!");
    }

    return 0;
}
