#!/usr/bin/bash
#ulimit -n 65536

#
# Security NOTE:
#  - The $USER variable is set by sshd.
#  - On error, kill and exit everything.
#  - Better dirty and dead, or alive and hacked.
#

########################################################
#
#   This code executes BEFORE the user shell on exit.
#
########################################################



# The forced command via sshd
export SSH_CMD_FORCED_CTF="/usr/local/bin/newctfsession.sh"


# TODO: Implement this "kind of" - see next TODO
#function logger() {
#  local uuid=`journalctl --new-id | awk 'FNR==2 { print $0 } '`
#  echo -e "MESSAGE_ID=`journalctl --new-id | awk 'FNR==2 { print $0 } '`\n" | /usr/bin/logger -p auth.warning -t ctfssh-wrapper --journald <<end
#$uuid
#MESSAGE=$arg0
#SYSLOG_IDENTIFIER=ctfgame
#end
#}

# Enable the logger
# TODO: Add support for journald via the official logger syntax. However much more complexity
logger="/usr/bin/logger -p auth.warning -t ctfssh-wrapper" > /dev/null 2>&1

# Find IP address
ip=`/usr/bin/echo $SSH_CONNECTION | /usr/bin/cut -d " " -f 1`

# TODO: NOTE: The logic for creating $SESSION_WRITE_ID is critical that it's in sync with bigbrother scripts
# NOTE: The reason for this is that we hash IP:DEST_PORT in a sha256 hash and cut it to 7 chars.
# NOTE: This is used to identify active sessions with netstat.
# The other code of this is currently under files/bigbrother
function getSessionHash() {
  ipanddestport=`/usr/bin/echo $SSH_CLIENT | /usr/bin/awk '{ printf "%s:%d", $1, $2 }'`
  sha256hash=`/usr/bin/echo $ipanddestport | /usr/bin/sha256sum | /usr/bin/awk '{ print $1 }'`
  sessionhash=`/usr/bin/echo $sha256hash | /usr/bin/head -c 7`
  export SESSION_HASH_ID=$sessionhash
}

getSessionHash

# Make unique hash for current session
export SESSION_ID=`/usr/bin/echo "$SSH_CONNECTION" | /usr/bin/sha256sum | /usr/bin/awk '{ print $1 }' | /usr/bin/head -c 7`
export SESSION_FS={{ ctfchroot_session_store_dir }}/$SESSION_ID-`/usr/bin/date +%s`
/usr/bin/mkdir -p $SESSION_FS > /dev/null 2>&1 || exit 1


# Writable temporary directory that will mount with aufs
# and become a per session only chroot ready filesystem.
export SESSION_WRITE_ID="${SESSION_HASH_ID}_tmpwritedir"
export SESSION_WRITE_FS={{ ctfchroot_session_store_dir }}/$SESSION_WRITE_ID
/usr/bin/mkdir -p $SESSION_WRITE_FS > /dev/null 2>&1 || exit 1

# Start session services
SERVICE_FILE="{{ ctfchroot_datadir }}/services/$USER"
if [[ -f "$SERVICE_FILE" ]]; then
  # Don't wait, it slows the login process.
  # For now we hope things run before the user
  # manages to start whatever the user is gonna
  # do for this level.
  $SERVICE_FILE start > /dev/null 2>&1 &
fi

# Log session start
$logger "session-start: $USER just logged in from $ip with session id $SESSION_ID and using $SESSION_FS#$SESSION_WRITE_FS" > /dev/null 2>&1

export SESSION_USER=$USER
export SSH_CMD_ATTEMPT=${SSH_ORIGINAL_COMMAND:-$SSH_CMD_FORCED_CTF}

# Log
$logger "attempted command: ${SSH_CMD_ATTEMPT}" > /dev/null 2>&1
$logger "forced command: ${SSH_CMD_FORCED_CTF}" > /dev/null 2>&1
# Run the forced command (chroot session)
$SSH_CMD_FORCED_CTF

########################################################
#
#   This code executes AFTER the user shell on exit.
#
########################################################




# Stop session services
if [[ -f "$SERVICE_FILE" ]]; then
  # Don't wait, it slows the login process.
  # For now we hope things run before the user
  # manages to start whatever the user is gonna
  # do for this level.
  $SERVICE_FILE stop > /dev/null 2>&1 &
fi

# Log session stop
$logger "session-stop: $USER just logged out from $ip with session id $SESSION_ID and used $SESSION_FS#$SESSION_WRITE_FS" > /dev/null 2>&1

